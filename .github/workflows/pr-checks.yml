name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  quality-gate:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: test
      NEXT_PUBLIC_SUPABASE_URL_TEST: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL_TEST }}
      SUPABASE_TEST_SERVICE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Apply test database migrations
        run: node apply_fix_migration.js

      - name: Run full test suite with coverage
        run: npm run test:coverage

      - name: Check test coverage threshold
        run: |
          COVERAGE=$(npx c8 report --reporter=json-summary | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Coverage below 80% threshold"
            exit 1
          else
            echo "‚úÖ Coverage above 80% threshold"
          fi

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs')
            
            // Read coverage summary if it exists
            let coverageComment = '## üìä Test Coverage\n\nCoverage report will be available after tests complete.\n'
            
            try {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'))
              const linesPct = coverage.total.lines.pct
              const branchesPct = coverage.total.branches.pct
              const funcsPct = coverage.total.functions.pct
              const stmtsPct = coverage.total.statements.pct
              
              coverageComment = `## üìä Test Coverage
              
              | Metric | Coverage |
              |--------|----------|
              | Lines | ${linesPct}% |
              | Branches | ${branchesPct}% |
              | Functions | ${funcsPct}% |
              | Statements | ${stmtsPct}% |
              
              ${linesPct >= 80 ? '‚úÖ' : '‚ùå'} Coverage ${linesPct >= 80 ? 'meets' : 'below'} 80% threshold
              `
            } catch (e) {
              console.log('Coverage file not found, using default message')
            }

            const comment = `## üß™ Test Results
            
            All ranking algorithm tests have been executed against the test database.
            
            ${coverageComment}
            
            **Ready for merge:** All tests passing and coverage requirements met.`

            // Find existing comment or create new one  
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const existingComment = comments.find(comment => 
              comment.body.includes('üß™ Test Results'))

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              })
            }

  algorithm-validation:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      NEXT_PUBLIC_SUPABASE_URL_TEST: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL_TEST }}
      SUPABASE_TEST_SERVICE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Apply migrations
        run: node apply_fix_migration.js

      - name: Validate ranking algorithms
        run: |
          echo "üîç Running comprehensive ranking algorithm validation..."
          npm run test:run -- tests/__tests__/ranked-choice/
          echo "‚úÖ All ranking algorithm tests passed"

      - name: Check for algorithm regressions  
        run: |
          echo "üõ°Ô∏è Checking for regressions in resolved bugs..."
          npm run test:run -- tests/__tests__/ranked-choice/zero-vote-elimination.test.js
          echo "‚úÖ Zero-vote elimination bug remains fixed"